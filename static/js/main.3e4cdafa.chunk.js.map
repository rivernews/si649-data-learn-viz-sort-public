{"version":3,"sources":["helpers/data-generator.js","components/animated-sort-bars/animated-sort-bars.jsx","components/n-scale-slider/n-scale-slider.jsx","components/performance-graph/performance-graph.jsx","App.js","serviceWorker.js","index.js"],"names":["generateRandomIntegers","start","end","size","arguments","length","undefined","range","data","i","push","id","concat","value","Math","ceil","floor","random","generateRangeInt","last","AnimatedSortBars","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setupInitialScale","x","d3","domain","map","d","svgSize","width","padding","y","dataMax","height","createBarChart","bind","assertThisInitialized","updateBarChart","_this2","_this$setupInitialSca","xScale","yScale","bars","node","selectAll","t","duration","swapTransition","enter","append","styles","opacity","attrs","class","rx","bandwidth","ry","transition","exit","remove","highlightedBarIds","find","attr","_this3","react_default","a","createElement","className","ref","Component","NScaleSlider","state","scale","datasetType","handleRadioChange","$event","radioStringValue","target","setState","onSlideChange","handleDatasetRadioChange","onDatasetChange","FormControl_default","component","FormLabel_default","RadioGroup_default","aria-label","name","onChange","scaleOptions","option","FormControlLabel_default","key","disabled","control","Radio_default","label","FormHelperText_default","datasetOptions","uid","PerformanceGraph","mockData","axes","axis","yOffset","xOffset","radarConfig","svg","properties","SortAnimation","Array","isArray","animated_sort_bars_AnimatedSortBars","App","transitionDurationRange","resetData","generateNewDataForAllSort","onStartSortClick","asyncSetState","callback","isSorting","then","Promise","all","bubbleSort","bubbleSortData","selectionSort","selectionSortData","insertionSort","insertionSortData","onNScaleSlideChange","updateDataset","onDatasetTypeChange","onTransitionDurationSliderValueChange","transitionDurationSliderValue","transitionDurationSliderScale","detail","transitionDuration","bubbleSortHighlightedBarIds","selectionSortHighlightedBarIds","insertionSortHighlightedBarIds","d3Scales","exponent","newDataSets","dataRef","n","stateKeyName","getStateDataKeyName","sortingTargetIndex","insertIndex","markBarsByIndexes","asyncWait","sortingTarget","splice","DataGenerator","clearMarkedBars","minIndex","j","swap","isSwapped","indexes","sortType","dataKeyName","highlightedBarIdsKeyName","getHighlightedBarIdsKeyName","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","index","err","return","toLowerCase","resolve","reject","defineProperty","index1","index2","temp","assign","_this4","_ref2$callback","callbackAssignedState","milliSecond","setTimeout","sort","b","slice","dist_default","raised","onClick","toFixed","slider","theme","n_scale_slider_NScaleSlider","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6OAMO,SAASA,IAEZ,IAF0D,IANrCC,EAAOC,EAMOC,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAhB,GAAIG,EAAYH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAClDI,EAAO,GACFC,EAAI,EAAGA,EAAIN,EAAMM,IACtBD,EAAKE,KAAK,CACNC,GAAE,MAAAC,OAAQH,GACVI,OAXaZ,EAWGa,KAAKC,KAAa,IAARR,GAXNL,EAWoBK,EAVzCO,KAAKE,MACRF,KAAKG,UAAYf,EAAMD,IACvBA,KAYJ,OAAOO,EA2BJ,SAASU,EAAiBjB,EAAOC,GAGpC,IAH4E,IACxEM,EAAO,GACPW,EAFwEf,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAEnCF,EAAM,EAAGA,EACzCO,EAAIR,EAAOQ,EAAIU,EAAMV,IAC1BD,EAAKE,KAAKD,GAEd,OAAOD,oCCvCUY,qBAMjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAiGVQ,kBAAoB,WAWhB,MAAO,CACHC,EAXIC,MACHC,OAAOV,EAAKD,MAAMb,KAAKyB,IAAI,SAACC,EAAGzB,GAAJ,OAAUA,KACrCF,MAAM,CAAC,EAAGe,EAAKD,MAAMc,QAAQC,QAC7BC,QAAQ,IASTC,EAPIP,MACHC,OAAO,CAAC,EAAGV,EAAKiB,UAChBhC,MAAM,CAAC,EAAGe,EAAKD,MAAMc,QAAQK,WAxGlClB,EAAKmB,eAAiBnB,EAAKmB,eAAeC,KAApBnB,OAAAoB,EAAA,EAAApB,QAAAoB,EAAA,EAAApB,CAAAD,KAFPA,mFAKfG,KAAKgB,8DAGLhB,KAAKmB,0DAILnB,KAAKmB,0DAGQ,IAAAC,EAAApB,KAEbA,KAAKc,QAAUR,IAAON,KAAKJ,MAAMb,KAAKyB,IAAI,SAACC,GAAD,OAAOA,EAAErB,SAFtC,IAAAiC,EAGIrB,KAAKI,oBAAdC,EAHKgB,EAGLhB,EAAGQ,EAHEQ,EAGFR,EACXb,KAAKsB,OAASjB,EACdL,KAAKuB,OAASV,EAGdb,KAAKwB,KAAOlB,IAAUN,KAAKyB,MACtBC,UAAU,QACV3C,KAAKiB,KAAKJ,MAAMb,KAAM,SAAC0B,EAAGzB,GAEvB,OAAOyB,EAAEvB,KAIjB,IAAIyC,EAAIrB,MAAgBsB,SAAS5B,KAAKJ,MAAMiC,gBAG5C7B,KAAKwB,KAAKM,QAAQC,OAAO,QACpBC,OAAO,CACJC,QAAS,IAEZC,MAAM,CACHC,MAAO,YACPC,GAA8B,GAA1BpC,KAAKsB,OAAOe,YAChBC,GAA8B,GAA1BtC,KAAKsB,OAAOe,YAChBhC,EAAG,SAACI,EAAGzB,GAAJ,OAAUoC,EAAKE,OAAOtC,IACzB6B,EAAGb,KAAKJ,MAAMc,QAAQK,OACtBA,OAAQ,EACRJ,MAAO,kBAAMS,EAAKE,OAAOe,eAE5BE,WAAWZ,GACXK,OAAO,CACJC,QAAS,EACTM,WAAU,QAAApD,OAAUwC,EAAE,IAAZ,OAEbO,MAAM,CACHrB,EAAG,SAACJ,EAAGzB,GACH,OAAOoC,EAAKxB,MAAMc,QAAQK,OAASK,EAAKG,OAAOd,EAAErB,QAErD2B,OAAQ,SAAAN,GAAC,OAAIW,EAAKG,OAAOd,EAAErB,UAInCY,KAAKwB,KAAKgB,OACLN,MAAM,CACHC,MAAO,SAEVI,WAAWZ,GACXO,MAAM,CACHnB,OAAQ,IAEXiB,OAAO,CACJC,QAAS,IAEZQ,SAGLzC,KAAKwB,KACAU,MAAM,CACHE,GAA8B,GAA1BpC,KAAKsB,OAAOe,YAChBC,GAA8B,GAA1BtC,KAAKsB,OAAOe,cAEnBE,WAAWZ,GACXO,MAAM,CACHC,MAAO,SAAC1B,EAAGzB,GAEP,YAAkBH,IADNuC,EAAKxB,MAAM8C,kBAAkBC,KAAK,SAACzD,GAAD,OAAQuB,EAAEvB,KAAOA,IAChC,YAAc,qBAGpD0D,KAAK,IAAK,SAACnC,EAAGzB,GAAJ,OAAUoC,EAAKE,OAAOtC,KAEhC4D,KAAK,IAAK,SAACnC,GACR,OAAOW,EAAKxB,MAAMc,QAAQK,OAASK,EAAKG,OAAOd,EAAErB,SAEpDwD,KAAK,SAAU,SAAAnC,GAAC,OAAIW,EAAKG,OAAOd,EAAErB,SAClCwD,KAAK,QAAS5C,KAAKsB,OAAOe,8CAuB1B,IAAAQ,EAAA7C,KACL,OACI8C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBC,IAAK,SAAAzB,GAAI,OAAIoB,EAAKpB,KAAOA,GAC1Dd,MAAOX,KAAKJ,MAAMc,QAAQC,MAAOI,OAAQf,KAAKJ,MAAMc,QAAQK,gBA5H9BoC,4HCGzBC,cAkCjB,SAAAA,EAAYxD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoD,IACfvD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsD,GAAAjD,KAAAH,KAAMJ,KAzBVyD,MAAQ,CACJjE,MAAK,GAAAD,OAAKU,EAAKD,MAAM0D,OACrBC,YAAa1D,EAAKD,MAAM2D,aAsBT1D,EAKnB2D,kBAAoB,SAAAC,GAChB,IAAIC,EAAmBD,EAAOE,OAAOvE,MACrCS,EAAK+D,SAAS,CACVxE,MAAOsE,GACR,WACC7D,EAAKD,MAAMiE,eAAeH,MAVf7D,EAcnBiE,yBAA2B,SAAAL,GACvB,IAAIC,EAAmBD,EAAOE,OAAOvE,MACrCS,EAAK+D,SAAS,CACVL,YAAaG,GACd,WACC7D,EAAKD,MAAMmE,gBAAgBL,MAnBhB7D,wEAwBV,IAAAuB,EAAApB,KACL,OACI8C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,yCAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAAb,qVAOJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CAAakB,UAAU,YACnBnB,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,CAAWE,UAAU,4BAA4BgB,UAAU,UAA3D,aACAnB,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CACIqB,aAAW,UACXC,KAAK,SACLjF,MAAOY,KAAKqD,MAAMjE,MAClBkF,SAAUtE,KAAKwD,mBAGXJ,EAAamB,aAAa/D,IAAI,SAACgE,EAAQxF,GAAT,OAC1B8D,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CAAkB2B,IAAK1F,EAAG2F,SAAUvD,EAAKxB,MAAM+E,SAAUvF,MAAOoF,EAAQI,QAAS9B,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,MAAW+B,MAAON,OAI/G1B,EAAAC,EAAAC,cAAC+B,EAAAhC,EAAD,0FAKhBD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,+CAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAAb,mLAMJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CAAakB,UAAU,YACnBnB,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,CAAWE,UAAU,4BAA4BgB,UAAU,UAA3D,gBACAnB,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CACIqB,aAAW,eACXC,KAAK,cACLjF,MAAOY,KAAKqD,MAAME,YAClBe,SAAUtE,KAAK8D,0BAGXV,EAAa4B,eAAexE,IAAI,SAACgE,GAAD,OAC5B1B,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CAAkB2B,IAAKF,EAAOS,IAAKN,SAAUvD,EAAKxB,MAAM+E,SAAUvF,MAAOoF,EAAOS,IAAKL,QAAS9B,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,MAAW+B,MAAON,EAAOM,WAInIhC,EAAAC,EAAAC,cAAC+B,EAAAhC,EAAD,+GA1HMI,aAArBC,EAeVmB,aAAe,CAClB,KAAM,KAAM,MAhBCnB,EAmBV4B,eAAiB,CACpB,CACIC,IAAG,SACHH,MAAK,UAET,CACIG,IAAG,SACHH,MAAK,UAET,CACIG,IAAG,iBACHH,MAAK,uCCYb,SAAAI,EAAYtF,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkF,IACfrF,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoF,GAAA/E,KAAAH,KAAMJ,KAnCVyD,MAAQ,CACJ8B,SAAU,CACN,CACIlC,UAAW,UACXmC,KAAM,CACF,CAAEC,KAAM,WAAYjG,MAAO,GAAIkG,QAAS,IACxC,CAAED,KAAM,eAAgBjG,MAAO,GAC/B,CAAEiG,KAAM,WAAYjG,MAAO,GAC3B,CAAEiG,KAAM,YAAajG,MAAO,GAC5B,CAAEiG,KAAM,OAAQjG,MAAO,EAAGmG,SAAU,MAG5C,CACItC,UAAW,YACXmC,KAAM,CACF,CAAEC,KAAM,WAAYjG,MAAO,GAC3B,CAAEiG,KAAM,eAAgBjG,MAAO,GAC/B,CAAEiG,KAAM,WAAYjG,MAAO,IAC3B,CAAEiG,KAAM,YAAajG,MAAO,IAC5B,CAAEiG,KAAM,OAAQjG,MAAO,OAepBS,EAJnB2F,YAAc,GAIK3F,mFAKfG,KAAKyF,IAAMnF,IAAUN,KAAKyB,qFAU1B,OAKIqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BAhEmBE,cAmCnCuC,WAAa,CAChB,SAAU,SAAU,uEC9B5B,SAASC,EAAc/F,GACnB,OAAKgG,MAAMC,QAAQjG,EAAMb,OAA+B,IAAtBa,EAAMb,KAAKH,OAItCkE,EAAAC,EAAAC,cAAC8C,EAAD,CACH/G,KAAMa,EAAMb,KACZ2B,QAASd,EAAMc,QACfmB,eAAgBjC,EAAMiC,eACtBa,kBAAmB9C,EAAM8C,oBAPlBI,EAAAC,EAAAC,cAAA,gBAybA+C,cA1aX,SAAAA,EAAYnG,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+F,IACflG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiG,GAAA5F,KAAAH,KAAMJ,KAHVoG,wBAA0B,CAAC,GAAI,KAEZnG,EA4CnBoG,UAAY,WACRpG,EAAK+D,SAAS/D,EAAKqG,0BAA0BrG,EAAKwD,MAAMvE,SA7CzCe,EAgDnBsG,iBAAmB,WACftG,EAAKuG,cAAc,CACfC,SAAU,SAAUhD,GAEhB,OADAA,EAAMiD,WAAY,EACXjD,KAGVkD,KAAK,kBACFC,QAAQC,IAAI,CACR5G,EAAK6G,WAAW7G,EAAKwD,MAAMsD,gBAC3B9G,EAAK+G,cAAc/G,EAAKwD,MAAMwD,mBAC9BhH,EAAKiH,cAAcjH,EAAKwD,MAAM0D,uBAGrCR,KAAK,kBACF1G,EAAKuG,cAAc,CACfC,SAAU,SAAUhD,GAEhB,OADAA,EAAMiD,WAAY,EACXjD,QAlERxD,EAyEnBmH,oBAAsB,SAAAvD,GAClB,IAAIH,EAAQG,EACZ5D,EAAK+D,SAAS,CACVN,SACD,WACCzD,EAAKoH,cACDpH,EAAKqG,0BAA0BrG,EAAKwD,MAAMvE,WA/EnCe,EAqFnBqH,oBAAsB,SAAAzD,GAClB,IAAIF,EAAcE,EAClB5D,EAAK+D,SAAS,CACVL,eACD,WACC1D,EAAKoH,cACDpH,EAAKqG,0BAA0BrG,EAAKwD,MAAMvE,WA3FnCe,EAwGnBsH,sCAAwC,SAAC1D,GACrC,IAAI2D,EAAgCvH,EAAKwH,8BAA8B5D,EAAO6D,OAAOlI,OACrFS,EAAK+D,SAAS,CACVwD,gCACAG,mBAAoBH,KAzGxBvH,EAAKwD,MAAQ,CACTiD,WAAW,EACXhD,MAAO,GACPxE,MAAO,IACP4B,QAAS,CACLC,MAAO,IACPI,OAAQ,KAMZwG,mBAAoB,GACpBH,8BAA+B,GAC/B7D,YAAa,SACboD,eAAgB,GAChBE,kBAAmB,GACnBE,kBAAmB,GACnBS,4BAA6B,GAC7BC,+BAAgC,GAChCC,+BAAgC,IAGpC7H,EAAKwH,8BAAgCM,MAChCC,SAAS,GACTrH,OAAO,CAAC,EAAG,MACXzB,MAAMe,EAAKmG,yBA7BDnG,mFAiCfG,KAAK4D,SAAS5D,KAAKkG,0BAA0BlG,KAAKqD,MAAMvE,4FA+D9C+I,GACV7H,KAAK4D,SAAS,CACV+C,eAAgBkB,EAAYlB,eAC5BE,kBAAmBgB,EAAYhB,kBAC/BE,kBAAmBc,EAAYd,qMAkBnBe,iCAAU,GACtBC,EAAID,EAAQlJ,OACZoJ,EAAehI,KAAKiI,oBAAoB,mCAEnCjJ,kFACDkJ,EAAqBlJ,EACrBmJ,EAAcnJ,EAAI,WAEhBoC,EAAKgH,kBAAkB,CAACF,EAAoBC,GAAc,yBACzDA,GAAe,GAAKL,EAAQK,GAAa/I,MAAQ0I,EAAQI,GAAoB9I,wCAC1EgC,EAAKgH,kBAAkB,CAACF,EAAoBC,GAAc,oCAC1D/G,EAAKiH,UAA0C,EAAhCjH,EAAKiC,MAAMkE,2BAChCY,kCAEJA,cAEM/G,EAAKgF,cAAc,CACrBC,SAAU,SAAUhD,GAChB,IAAIiF,EAAgBjF,EAAM2E,GAAcE,GAGxC,OAFA7E,EAAM2E,GAAcO,OAAOL,EAAoB,GAC/C7E,EAAM2E,GAAcO,OAAOJ,EAAa,EAAGG,GACpCjF,8BAGTjC,EAAKgH,kBAAkBI,EAA+BL,EAAaD,GAAoB,GAAO,sCAC9F9G,EAAKiH,UAA0C,EAAhCjH,EAAKiC,MAAMkE,kEArB3BvI,EAAI,cAAGA,EAAI+I,6CAAX/I,kBAAcA,4CAwBjBgB,KAAKyI,gBAAgB,+TAIXX,iCAAU,GACtBC,EAAID,EAAQlJ,OACO,IAAnBkJ,EAAQlJ,wDAEHI,EAAI,cAAGA,EAAI+I,EAAI,oBAChBW,EAAW1J,EACN2J,EAAI3J,EAAI,cAAG2J,EAAIZ,qCACd/H,KAAKoI,kBAAkB,CAACO,EAAGD,GAAW,sCACtC1I,KAAKqI,UAA0C,EAAhCrI,KAAKqD,MAAMkE,4BAC5BO,EAAQa,GAAGvJ,MAAQ0I,EAAQY,GAAUtJ,QACrCsJ,EAAWC,WAJQA,4CAOrB3I,KAAKoI,kBAAkB,CAACpJ,EAAG0J,GAAW,sCACtC1I,KAAK4I,KAAK5J,EAAG0J,EAAU,sCACvB1I,KAAKqI,UAA0C,EAAhCrI,KAAKqD,MAAMkE,4BAXTvI,4CAcrBgB,KAAKyI,gBAAgB,4TAIdX,iCAAU,GACnBC,EAAID,EAAQlJ,OACO,IAAnBkJ,EAAQlJ,wDAEHI,EAAI,cAAGA,EAAI+I,oBACZc,GAAY,EACPF,EAAI,cAAGA,EAAIZ,EAAI,EAAI/I,qCAClBgB,KAAKoI,kBAAkB,CAACO,EAAGA,EAAI,GAAI,mCACnC3I,KAAKqI,UAA0C,EAAhCrI,KAAKqD,MAAMkE,iCAC5BO,EAAQa,GAAGvJ,MAAQ0I,EAAQa,EAAI,GAAGvJ,yCAC5BY,KAAK4I,KAAKD,EAAGA,EAAI,EAAG,yBAC1BE,GAAY,YACN7I,KAAKqI,UAA0C,EAAhCrI,KAAKqD,MAAMkE,4BANToB,8BAS1BE,uDAXc7J,4CAejBgB,KAAKyI,gBAAgB,iOAUPK,EAASC,kFACzBC,EAAchJ,KAAKiI,oBAAoBc,GACvCE,EAA2BjJ,KAAKkJ,4BAA4BH,YAE1D/I,KAAKoG,cAAc,CACrBC,SAAU,SAAUhD,GAChB,IAAIX,EAAoB,GADDyG,GAAA,EAAAC,GAAA,EAAAC,OAAAxK,EAAA,IAEvB,QAAAyK,EAAAC,EAAkBT,EAAlBU,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAA2B,KAAlBS,EAAkBN,EAAAlK,MACvBsD,EAAkBzD,KAAKoE,EAAM2F,GAAaY,GAAO1K,KAH9B,MAAA2K,GAAAT,GAAA,EAAAC,EAAAQ,EAAA,YAAAV,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GAQvB,OAHIN,IACA1F,EAAM4F,GAA4BvG,GAE/BW,wJAKgB,IAAf0F,EAAepK,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAC3B,MAAqB,KAAboK,EAAD,GAAA5J,OAAuB4J,EAASgB,cAAhC,YAA0D,2DAG1B,IAAfhB,EAAepK,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GACnC,MAAqB,KAAboK,EAAD,GAAA5J,OAAuB4J,EAAvB,yBAAyD,qFAG9CA,uGACX,IAAIvC,QAAQ,SAACwD,EAASC,GACzBpH,EAAKe,SAAS,SAACP,GAEX,OADA2G,IACOlK,OAAAoK,EAAA,EAAApK,CAAA,GACF+C,EAAKqG,4BAA4BH,GAAY,iLAMnDoB,EAAQC,EAAQrB,gFACnBC,EAAchJ,KAAKiI,oBAAoBc,YACrC/I,KAAKoG,cAAc,CACrBC,SAAU,SAAUhD,GAChB,IAAIgH,EAAOvK,OAAOwK,OAAOjH,EAAM2F,GAAamB,IAG5C,OAFA9G,EAAM2F,GAAamB,GAAU9G,EAAM2F,GAAaoB,GAChD/G,EAAM2F,GAAaoB,GAAUC,EACtBhH,qLAMqB,IAAAkH,EAAAvK,KAAAwK,GAAA7L,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,IAApB0H,gBAAwB,IAAAmE,EAAb,KAAaA,EACpC,OAAO,IAAIhE,QAAQ,SAAAwD,GACfO,EAAK3G,SAAS,SAACP,GACX,GAAiB,OAAbgD,EAAmB,CACnB,IAAIoE,EAAwBpE,EAAShD,GAErC,OADA2G,IACOlK,OAAOwK,OAAOjH,EAAOoH,0CAMlCC,GACN,OAAO,IAAIlE,QAAQ,SAAAwD,GAAO,OAAIW,WAAWX,EAASU,uDAG5B5L,GACtB,IAAIiJ,EAAI/H,KAAKqD,MAAMC,MACfvE,EAAO,GAWX,MAV+B,WAA3BiB,KAAKqD,MAAME,YACXxE,EAAOyJ,EAAqCT,EAAGjJ,GAEf,WAA3BkB,KAAKqD,MAAME,YAChBxE,EJjSL,WAAuD,IACtDA,EAAOR,EAD+CI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAhB,GAAgBA,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,IAOtD,OAJAI,EAAK6L,KAAK,SAAC7H,EAAG8H,GACV,OAAQ9H,EAAE3D,MAAQyL,EAAEzL,MAAS,GAAK,IAG/BL,EI0RQyJ,CAAqCT,EAAGjJ,GAEf,mBAA3BkB,KAAKqD,MAAME,cAChBxE,EJ1RL,WAA8D,IAC7DA,EAAOR,EADsDI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAhB,GAAgBA,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,IAO7D,OAJAI,EAAK6L,KAAK,SAAC7H,EAAG8H,GACV,OAAQ9H,EAAE3D,MAAQyL,EAAEzL,OAAU,EAAI,IAG/BL,EImRQyJ,CAA4CT,EAAGjJ,IAGnD,CACH6H,eAAgB5H,EAAK+L,MAAM,GAC3BjE,kBAAmB9H,EAAK+L,MAAM,GAC9B/D,kBAAmBhI,EAAK+L,MAAM,qCAalC,OACIhI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kCACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAd,6BACAH,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAAb,iNAMJH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAAb,8QAOAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAC+H,EAAAhI,EAAD,CACIE,UAAU,gBACV+H,QAAM,EACNrG,SAAU3E,KAAKqD,MAAMiD,UACrB2E,QAASjL,KAAKmG,kBAJlB,SAOArD,EAAAC,EAAAC,cAAC+H,EAAAhI,EAAD,CACIE,UAAU,gBACV+H,QAAM,EACNrG,SAAU3E,KAAKqD,MAAMiD,UACrB2E,QAASjL,KAAKiG,WAJlB,UAQJnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACXH,EAAAC,EAAAC,cAAA,4CAEIF,EAAAC,EAAAC,cAAA,cACKhD,KAAKqD,MAAMkE,mBAAmB2D,QAAQ,GAD3C,yBAIJpI,EAAAC,EAAAC,cAACmI,EAAA,OAAD,CACIC,MAAM,oBACN9G,SAAUtE,KAAKmH,2CAK3BrE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACXH,EAAAC,EAAAC,cAAA,eAEAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAC2C,EAAD,CACI5G,KAAMiB,KAAKqD,MAAMsD,eACjBjG,QAASV,KAAKqD,MAAM3C,QACpBmB,eAAgB7B,KAAKqD,MAAMkE,mBAC3B7E,kBAAmB1C,KAAKqD,MAAMmE,+BAGtC1E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,6BAGRF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAC2C,EAAD,CACI5G,KAAMiB,KAAKqD,MAAMwD,kBACjBnG,QAASV,KAAKqD,MAAM3C,QACpBmB,eAAgB7B,KAAKqD,MAAMkE,mBAC3B7E,kBAAmB1C,KAAKqD,MAAMoE,kCAGtC3E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,gCAGRF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAC2C,EAAD,CACI5G,KAAMiB,KAAKqD,MAAM0D,kBACjBrG,QAASV,KAAKqD,MAAM3C,QACpBmB,eAAgB7B,KAAKqD,MAAMkE,mBAC3B7E,kBAAmB1C,KAAKqD,MAAMqE,kCAGtC5E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,mCAMpBF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACqI,EAAD,CACIxH,cAAe7D,KAAKgH,oBACpBjD,gBAAiB/D,KAAKkH,oBACtB5D,MAAOtD,KAAKqD,MAAMC,MAClBC,YAAavD,KAAKqD,MAAME,YACxBoB,SAAU3E,KAAKqD,MAAMiD,uBApZnCnD,aClBEmI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kECVNC,IAASC,OAAO9I,EAAAC,EAAAC,cAAC6I,EAAD,MAASC,SAASC,eAAe,SDqH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3F,KAAK,SAAA4F,GACjCA,EAAaC","file":"static/js/main.3e4cdafa.chunk.js","sourcesContent":["export function rangeInt(start, end) {\n    return Math.floor(\n        Math.random() * (end - start)\n    ) + start;\n}\n\nexport function generateRandomIntegers(size = 10, range = 10) {\n    let data = [];\n    for (let i = 0; i < size; i++) {\n        data.push({\n            id: `id-${i}`,\n            value: rangeInt(Math.ceil(range * .15), range),\n        })\n    }\n\n    return data;\n}\n\nexport function generateSortedIntegers(size = 10, range = 10) {\n    let data = generateRandomIntegers(size, range);\n\n    data.sort((a, b) => {\n        return (a.value > b.value) ? 1 : -1;\n    });\n\n    return data\n}\n\nexport function generateSortedReverseIntegers(size = 10, range = 10) {\n    let data = generateRandomIntegers(size, range);\n\n    data.sort((a, b) => {\n        return (a.value > b.value) ? -1 : 1;\n    });\n\n    return data\n}\n\nexport function generateFewUniquesIntegers(size = 10, range = 10) {\n    \n}\n\nexport function generateRangeInt(start, end, isIncludingBothBoundaries = false) {\n    let data = [];\n    let last = (isIncludingBothBoundaries) ? end + 1: end;\n    for (let i = start; i < last; i++) {\n        data.push(i)\n    }\n    return data;\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n\n// import '../../App.scss'\nimport './animated-sort-bars.scss'\n\nimport * as d3 from 'd3';\nimport \"d3-selection-multi\";\n\nexport default class AnimatedSortBars extends Component {\n    dataMax;\n    xScale;\n    yScale;\n    bars;\n\n    constructor(props) {\n        super(props)\n        this.createBarChart = this.createBarChart.bind(this)\n    }\n    componentDidMount() { // Lifecycle: https://reactjs.org/docs/react-component.html#the-component-lifecycle\n        this.createBarChart()\n    }\n    componentDidUpdate() {\n        this.updateBarChart()\n    }\n\n    createBarChart() {\n        this.updateBarChart();\n    }\n\n    updateBarChart() {\n        // get data\n        this.dataMax = d3.max(this.props.data.map((d) => d.value));\n        const { x, y } = this.setupInitialScale();\n        this.xScale = x;\n        this.yScale = y;\n\n        // inject data to dom for updates\n        this.bars = d3.select(this.node)\n            .selectAll('rect')\n            .data(this.props.data, (d, i) => {\n                // give each data an identifier so d3 can keep track of\n                return d.id;\n            })\n            ;\n\n        let t = d3.transition().duration(this.props.swapTransition); // cannot reuse across updates, have to regenerate t for tansition(); otherwise duration, ... won't work\n\n        // new\n        this.bars.enter().append('rect')\n            .styles({\n                opacity: 0,\n            })\n            .attrs({\n                class: \"numberBar\",\n                rx: this.xScale.bandwidth() * .5,\n                ry: this.xScale.bandwidth() * .5,\n                x: (d, i) => this.xScale(i),\n                y: this.props.svgSize.height,\n                height: 0,\n                width: () => this.xScale.bandwidth()\n            })\n            .transition(t)\n            .styles({\n                opacity: 1,\n                transition: `fill ${t/1000.0}s`\n            })\n            .attrs({\n                y: (d, i) => {\n                    return this.props.svgSize.height - this.yScale(d.value);\n                },\n                height: d => this.yScale(d.value),\n            })\n\n        // removed\n        this.bars.exit()\n            .attrs({\n                class: \"exit\"\n            })\n            .transition(t)\n            .attrs({\n                height: 0\n            })\n            .styles({\n                opacity: 0\n            })\n            .remove()\n\n        // update existing\n        this.bars\n            .attrs({\n                rx: this.xScale.bandwidth() * .5,\n                ry: this.xScale.bandwidth() * .5,\n            })\n            .transition(t)\n            .attrs({\n                class: (d, i) => {\n                    let found = this.props.highlightedBarIds.find((id) => d.id === id);\n                    return (found === undefined) ? \"numberBar\" : \"markedNumberBar\";\n                }\n            })\n            .attr('x', (d, i) => this.xScale(i))\n            // .attr('x', (d, i) => i * 25)\n            .attr('y', (d) => {\n                return this.props.svgSize.height - this.yScale(d.value);\n            })\n            .attr('height', d => this.yScale(d.value))\n            .attr('width', this.xScale.bandwidth())\n            ;\n\n\n    }\n\n    setupInitialScale = () => {\n        let x = d3.scaleBand()\n            .domain(this.props.data.map((d, i) => i))\n            .range([0, this.props.svgSize.width])\n            .padding(0.1);\n\n        let y = d3.scaleLinear()\n            .domain([0, this.dataMax])\n            .range([0, this.props.svgSize.height])\n            ;\n\n        return {\n            x,\n            y\n        }\n    }\n\n    render() {\n        return (\n            <svg className=\"AnimatedSortBarsSVG\" ref={node => this.node = node}\n                width={this.props.svgSize.width} height={this.props.svgSize.height}>\n            </svg>\n        );\n    }\n}\n\n// See https://stackoverflow.com/questions/38363156/static-proptypes-not-working-under-es6\nAnimatedSortBars.propTypes = {\n    svgSize: PropTypes.shape({\n        width: PropTypes.number,\n        height: PropTypes.number\n    }),\n    data: PropTypes.array,\n    swapTransition: PropTypes.number,\n    highlightedBarIds: PropTypes.arrayOf(PropTypes.string),\n};","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport \"./n-scale-slider.scss\"\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nexport default class NScaleSlider extends Component {\n    static propTypes = {\n        // prop: PropTypes,\n        onSlideChange: PropTypes.func,\n        onDatasetChange: PropTypes.func,\n        scale: PropTypes.number,\n        disabled: PropTypes.bool,\n        datasetType: PropTypes.string\n    }\n\n    state = {\n        value: `${this.props.scale}`,\n        datasetType: this.props.datasetType\n    };\n\n    static scaleOptions = [\n        \"10\", \"30\", \"80\"\n    ]\n\n    static datasetOptions = [\n        {\n            uid: `random`,\n            label: `Random`,\n        },\n        {\n            uid: `sorted`,\n            label: `Sorted`,\n        },\n        {\n            uid: `sorted-reverse`,\n            label: `Sorted Reverse`,\n        },\n    ]\n\n    constructor(props) {\n        super(props)\n    }\n\n\n    handleRadioChange = $event => {\n        let radioStringValue = $event.target.value;\n        this.setState({\n            value: radioStringValue\n        }, () => {\n            this.props.onSlideChange(+radioStringValue)\n        });\n    }\n\n    handleDatasetRadioChange = $event => {\n        let radioStringValue = $event.target.value;\n        this.setState({\n            datasetType: radioStringValue\n        }, () => {\n            this.props.onDatasetChange(radioStringValue)\n        });\n    }\n\n\n    render() {\n        return (\n            <div className=\"controlsContainer\">\n                <content className=\"content\">\n                    <div className=\"controlContainer\">\n                        <div className=\"section-title\">\n                            <h2>Part Two: In The Long Term</h2>\n                        </div>\n                        <div className=\"section-content\">\n                            <header>\n                                <p className=\"long-description-text\">\n                                    You might already know the worst case of these three sort algorithms are all the same - O(n^2).\n                                    However, as you may notice in your observation, their performance still slightly differs,\n                                    and obviously there's one algorithm that's doing better than others.\n                                    How about in the long term? Change a different size of scale (n) and find it out!\n                                </p>\n                            </header>\n                            <div className=\"scaleControl\">\n                                <FormControl component=\"fieldset\" >\n                                    <FormLabel className=\"center-text light-bg-text\" component=\"legend\">Scale (n)</FormLabel>\n                                    <RadioGroup\n                                        aria-label=\"scale-n\"\n                                        name=\"scalen\"\n                                        value={this.state.value}\n                                        onChange={this.handleRadioChange}\n                                    >\n                                        {\n                                            NScaleSlider.scaleOptions.map((option, i) => (\n                                                <FormControlLabel key={i} disabled={this.props.disabled} value={option} control={<Radio />} label={option} />\n                                            ))\n                                        }\n                                    </RadioGroup>\n                                    <FormHelperText>Change a different scale n to see how the difference of sorting time changes.</FormHelperText>\n                                </FormControl>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"controlContainer\">\n                        <div className=\"section-title\">\n                            <h2>Part Three: Different Data Types</h2>\n                        </div>\n                        <div className=\"section-content\">\n                            <header>\n                                <p className=\"long-description-text\">\n                                    You might see one of the sorting algorithm outperforms another no matter how n scales.\n                                    However, does that hold for any dataset? Let's try a different dataset and\n                                    find it out!\n                            </p>\n                            </header>\n                            <div className=\"datasetControl\">\n                                <FormControl component=\"fieldset\" >\n                                    <FormLabel className=\"center-text light-bg-text\" component=\"legend\">Dataset Type</FormLabel>\n                                    <RadioGroup\n                                        aria-label=\"dataset-type\"\n                                        name=\"datasettype\"\n                                        value={this.state.datasetType}\n                                        onChange={this.handleDatasetRadioChange}\n                                    >\n                                        {\n                                            NScaleSlider.datasetOptions.map((option) => (\n                                                <FormControlLabel key={option.uid} disabled={this.props.disabled} value={option.uid} control={<Radio />} label={option.label} />\n                                            ))\n                                        }\n                                    </RadioGroup>\n                                    <FormHelperText>Change a different data set to see how the performance varies for each sorting algorithm.</FormHelperText>\n                                </FormControl>\n                            </div>\n                        </div>\n                    </div>\n                </content>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport * as d3 from 'd3';\nimport \"d3-selection-multi\";\n\nimport \"./performance-graph.scss\";\nimport { AnimatedSortBars } from \"../animated-sort-bars/animated-sort-bars\";\n\n\nexport default class PerformanceGraph extends Component {\n    static propTypes = {\n        svgSize: PropTypes.shape({\n            width: PropTypes.number,\n            height: PropTypes.number\n        }),\n        data: PropTypes.array,\n        transitionDuration: PropTypes.number,\n    }\n\n    state = {\n        mockData: [\n            {\n                className: 'germany', // optional can be used for styling\n                axes: [\n                    { axis: \"strength\", value: 13, yOffset: 10 },\n                    { axis: \"intelligence\", value: 6 },\n                    { axis: \"charisma\", value: 5 },\n                    { axis: \"dexterity\", value: 9 },\n                    { axis: \"luck\", value: 2, xOffset: -20 }\n                ]\n            },\n            {\n                className: 'argentina',\n                axes: [\n                    { axis: \"strength\", value: 6 },\n                    { axis: \"intelligence\", value: 7 },\n                    { axis: \"charisma\", value: 10 },\n                    { axis: \"dexterity\", value: 13 },\n                    { axis: \"luck\", value: 9 }\n                ]\n            }\n        ]\n    }\n\n    static properties = [\n        \"random\", \"sorted\", \"sorted-reverse\"\n    ]\n\n    svg;\n    radarConfig = {\n\n    }\n\n    constructor(props) {\n        super(props)\n    }\n\n    componentDidMount() {\n        this.svg = d3.select(this.node);\n\n        // RadarChart.draw(\".performanceGraph\", this.state.mockData);\n    }\n\n    componentDidUpdate() {\n\n    }\n\n    render() {\n        return (\n            // <svg className=\"PerformanceGraphSVG\" ref={node => this.node = node}\n            //     width={this.props.svgSize.width} height={this.props.svgSize.height}>\n            // </svg>\n\n            <div className=\"performanceGraph\">\n\n            </div>\n\n        );\n    }\n}\n","import React, { Component, } from 'react';\n\nimport * as DataGenerator from \"./helpers/data-generator\";\n\nimport './App.scss';\n\nimport AnimatedSortBars from \"./components/animated-sort-bars/animated-sort-bars\";\nimport NScaleSlider from \"./components/n-scale-slider/n-scale-slider\";\nimport PerformanceGraph from \"./components/performance-graph/performance-graph\";\n\nimport Button from '@material/react-button/dist';\nimport '@material/react-button/dist/button.css';\nimport * as d3Scales from 'd3-scale';\nimport { Slider } from \"@rmwc/slider\";\nimport '@material/slider/dist/mdc.slider.css';\n\nfunction SortAnimation(props) {\n    if (!Array.isArray(props.data) || props.data.length === 0) {\n        return <div></div>;\n    }\n\n    return <AnimatedSortBars\n        data={props.data}\n        svgSize={props.svgSize}\n        swapTransition={props.swapTransition}\n        highlightedBarIds={props.highlightedBarIds}\n    >\n    </AnimatedSortBars>\n}\n\nclass App extends Component {\n    transitionDurationRange = [10, 1000];\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isSorting: false,\n            scale: 10,\n            range: 240,\n            svgSize: {\n                width: 500,\n                height: 250,\n            },\n            // performanceSvgSize: {\n            //     width: 500,\n            //     height: 500,\n            // },\n            transitionDuration: 10,\n            transitionDurationSliderValue: 10,\n            datasetType: \"random\",\n            bubbleSortData: [],\n            selectionSortData: [],\n            insertionSortData: [],\n            bubbleSortHighlightedBarIds: [],\n            selectionSortHighlightedBarIds: [],\n            insertionSortHighlightedBarIds: [],\n        };\n\n        this.transitionDurationSliderScale = d3Scales.scalePow()\n            .exponent(4)\n            .domain([0, 100])\n            .range(this.transitionDurationRange);\n    }\n\n    componentDidMount() {\n        this.setState(this.generateNewDataForAllSort(this.state.range))\n    }\n    componentDidUpdate() {\n    }\n\n    /**\n     * UI Handlers\n     * \n     * \n     */\n\n    resetData = () => {\n        this.setState(this.generateNewDataForAllSort(this.state.range))\n    }\n\n    onStartSortClick = () => {\n        this.asyncSetState({\n            callback: function (state) {\n                state.isSorting = true\n                return state;\n            }\n        })\n            .then(() =>\n                Promise.all([\n                    this.bubbleSort(this.state.bubbleSortData),\n                    this.selectionSort(this.state.selectionSortData),\n                    this.insertionSort(this.state.insertionSortData),\n                ])\n            )\n            .then(() =>\n                this.asyncSetState({\n                    callback: function (state) {\n                        state.isSorting = false\n                        return state;\n                    }\n                })\n            )\n            ;\n    }\n\n    onNScaleSlideChange = $event => {\n        let scale = $event;\n        this.setState({\n            scale,\n        }, () => {\n            this.updateDataset(\n                this.generateNewDataForAllSort(this.state.range)\n            )\n        });\n        ;\n    }\n\n    onDatasetTypeChange = $event => {\n        let datasetType = $event;\n        this.setState({\n            datasetType,\n        }, () => {\n            this.updateDataset(\n                this.generateNewDataForAllSort(this.state.range)\n            );\n        });\n    }\n\n    updateDataset(newDataSets) {\n        this.setState({\n            bubbleSortData: newDataSets.bubbleSortData,\n            selectionSortData: newDataSets.selectionSortData,\n            insertionSortData: newDataSets.insertionSortData\n        });\n    }\n\n    onTransitionDurationSliderValueChange = ($event) => {\n        let transitionDurationSliderValue = this.transitionDurationSliderScale($event.detail.value);\n        this.setState({\n            transitionDurationSliderValue,\n            transitionDuration: transitionDurationSliderValue\n        });\n    }\n\n    /**\n     * Core Sort ALgorithms\n     * \n     * \n     */\n\n    async insertionSort(dataRef = []) {\n        let n = dataRef.length;\n        let stateKeyName = this.getStateDataKeyName(\"insertion\")\n\n        for (let i = 1; i < n; i++) {\n            let sortingTargetIndex = i;\n            let insertIndex = i - 1;\n\n            await this.markBarsByIndexes([sortingTargetIndex, insertIndex], \"insertion\")\n            while (insertIndex >= 0 && dataRef[insertIndex].value > dataRef[sortingTargetIndex].value) {\n                await this.markBarsByIndexes([sortingTargetIndex, insertIndex], \"insertion\")\n                await this.asyncWait(this.state.transitionDuration * 2);\n                insertIndex--;\n            }\n            insertIndex++;\n\n            await this.asyncSetState({\n                callback: function (state) {\n                    let sortingTarget = state[stateKeyName][sortingTargetIndex];\n                    state[stateKeyName].splice(sortingTargetIndex, 1);\n                    state[stateKeyName].splice(insertIndex, 0, sortingTarget);\n                    return state\n                }\n            })\n            await this.markBarsByIndexes(DataGenerator.generateRangeInt(insertIndex, sortingTargetIndex, true), \"insertion\")\n            await this.asyncWait(this.state.transitionDuration * 2);\n        }\n\n        await this.clearMarkedBars(\"insertion\");\n        return;\n    }\n\n    async selectionSort(dataRef = []) {\n        let n = dataRef.length;\n        if (dataRef.length === 0) return;\n\n        for (let i = 0; i < n - 1; i++) {\n            let minIndex = i;\n            for (let j = i + 1; j < n; j++) {\n                await this.markBarsByIndexes([j, minIndex], \"selection\")\n                await this.asyncWait(this.state.transitionDuration * 2);\n                if (dataRef[j].value < dataRef[minIndex].value) {\n                    minIndex = j;\n                }\n            }\n            await this.markBarsByIndexes([i, minIndex], \"selection\");\n            await this.swap(i, minIndex, \"selection\");\n            await this.asyncWait(this.state.transitionDuration * 2);\n        }\n\n        await this.clearMarkedBars(\"selection\");\n        return;\n    }\n\n    async bubbleSort(dataRef = []) {\n        let n = dataRef.length;\n        if (dataRef.length === 0) return;\n\n        for (let i = 0; i < n; i++) {\n            let isSwapped = false;\n            for (let j = 0; j < n - 1 - i; j++) {\n                await this.markBarsByIndexes([j, j + 1], \"bubble\")\n                await this.asyncWait(this.state.transitionDuration * 2);\n                if (dataRef[j].value > dataRef[j + 1].value) {\n                    await this.swap(j, j + 1, \"bubble\");\n                    isSwapped = true;\n                    await this.asyncWait(this.state.transitionDuration * 2);\n                }\n            }\n            if (!isSwapped) {\n                break;\n            }\n        }\n        await this.clearMarkedBars(\"bubble\");\n        return;\n    }\n\n    /**\n     * Helper Functions\n     * \n     * \n     */\n\n    async markBarsByIndexes(indexes, sortType) {\n        let dataKeyName = this.getStateDataKeyName(sortType);\n        let highlightedBarIdsKeyName = this.getHighlightedBarIdsKeyName(sortType);\n\n        await this.asyncSetState({\n            callback: function (state) {\n                let highlightedBarIds = []\n                for (let index of indexes) {\n                    highlightedBarIds.push(state[dataKeyName][index].id);\n                }\n                if (sortType) {\n                    state[highlightedBarIdsKeyName] = highlightedBarIds;\n                }\n                return state;\n            }\n        })\n    }\n\n    getStateDataKeyName(sortType = \"\") {\n        return (sortType !== \"\") ? `${sortType.toLowerCase()}SortData` : null;\n    }\n\n    getHighlightedBarIdsKeyName(sortType = \"\") {\n        return (sortType !== \"\") ? `${sortType}SortHighlightedBarIds` : null;\n    }\n\n    async clearMarkedBars(sortType) {\n        return new Promise((resolve, reject) => {\n            this.setState((state) => {\n                resolve()\n                return {\n                    [this.getHighlightedBarIdsKeyName(sortType)]: []\n                }\n            });\n        });\n    }\n\n    async swap(index1, index2, sortType) {\n        let dataKeyName = this.getStateDataKeyName(sortType);\n        await this.asyncSetState({\n            callback: function (state) {\n                let temp = Object.assign(state[dataKeyName][index1])\n                state[dataKeyName][index1] = state[dataKeyName][index2]\n                state[dataKeyName][index2] = temp\n                return state;\n            }\n        });\n        return;\n    }\n\n    asyncSetState({ callback = null } = {}) {\n        return new Promise(resolve => {\n            this.setState((state) => {\n                if (callback !== null) {\n                    let callbackAssignedState = callback(state);\n                    resolve();\n                    return Object.assign(state, callbackAssignedState);\n                }\n            })\n        });\n    }\n\n    asyncWait(milliSecond) {\n        return new Promise(resolve => setTimeout(resolve, milliSecond));\n    }\n\n    generateNewDataForAllSort(range) {\n        let n = this.state.scale;\n        let data = []\n        if (this.state.datasetType === \"random\") {\n            data = DataGenerator.generateRandomIntegers(n, range);\n        }\n        else if (this.state.datasetType === \"sorted\") {\n            data = DataGenerator.generateSortedIntegers(n, range);\n        }\n        else if (this.state.datasetType === \"sorted-reverse\") {\n            data = DataGenerator.generateSortedReverseIntegers(n, range);\n        }\n\n        return {\n            bubbleSortData: data.slice(0),\n            selectionSortData: data.slice(0),\n            insertionSortData: data.slice(0),\n        }\n    }\n\n    /**\n     * Template\n     * \n     * \n     */\n\n\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"mainPage\">\n                    <header className=\"App-header pageStandardContent\">\n                        <h2 className=\"headline-text\" >Basic Sort Algorithms Viz</h2>\n                        <h2>Part One: A Quick Look</h2>\n                        <p className=\"long-description-text\">\n                            Do you know how differnt sorting algorithms \"look like\" under the hood?\n                            Do you know why Bubble Sort is called bubble sort?\n\n                            Press the \"start\" button to trigger the sort and observe the changes in real-time. \n                    </p>\n                    <p className=\"long-description-text\">\n                        Comparison operation is the dominant factor of sort performance. \n                        Pink-marked bars indicate where a comparison or a costy operation occurred between two numbers.\n                        \n                        Particularly, observe how the bars move,\n                        and how each sort algorithm progress toward their final results.\n                    </p>\n                    <div className=\"action-container\" >\n                        <div className=\"start-actions\">\n                            <Button\n                                className=\"action-button\"\n                                raised\n                                disabled={this.state.isSorting}\n                                onClick={this.onStartSortClick}>\n                                Start\n                            </Button>\n                            <Button\n                                className=\"action-button\"\n                                raised\n                                disabled={this.state.isSorting}\n                                onClick={this.resetData}>\n                                Reset\n                            </Button>\n                        </div>\n                        <div className=\"transition-speed-actions\">\n                            <p>\n                                Animation Speed (10-1000ms):&nbsp;\n                                <strong>\n                                    {this.state.transitionDuration.toFixed(2)} ms / per comparison\n                                </strong>\n                            </p>\n                            <Slider\n                                theme=\"primary primaryBg\"\n                                onChange={this.onTransitionDurationSliderValueChange }\n                            />\n                        </div>\n                    </div>\n                    </header>\n                    <div className=\"App-content\">\n                        <div className=\"sort-animation-container\">\n                            <header>\n                            </header>\n                            <div className=\"sort-animation\">\n                                <div className=\"visualization\">\n                                    <SortAnimation\n                                        data={this.state.bubbleSortData}\n                                        svgSize={this.state.svgSize}\n                                        swapTransition={this.state.transitionDuration}\n                                        highlightedBarIds={this.state.bubbleSortHighlightedBarIds}\n                                    />\n                                </div>\n                                <div className=\"header center-text\">\n                                    <span>Bubble Sort</span>\n                                </div>\n                            </div>\n                            <div className=\"sort-animation\">\n                                <div className=\"visualization\">\n                                    <SortAnimation\n                                        data={this.state.selectionSortData}\n                                        svgSize={this.state.svgSize}\n                                        swapTransition={this.state.transitionDuration}\n                                        highlightedBarIds={this.state.selectionSortHighlightedBarIds}\n                                    />\n                                </div>\n                                <div className=\"header center-text\">\n                                    <span>Selection Sort</span>\n                                </div>\n                            </div>\n                            <div className=\"sort-animation\">\n                                <div className=\"visualization\">\n                                    <SortAnimation\n                                        data={this.state.insertionSortData}\n                                        svgSize={this.state.svgSize}\n                                        swapTransition={this.state.transitionDuration}\n                                        highlightedBarIds={this.state.insertionSortHighlightedBarIds}\n                                    />\n                                </div>\n                                <div className=\"header center-text\">\n                                    <span>Insertion Sort</span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"secondaryPage\">\n                    <div className=\"user-controls pageStandardContent\">\n                        \n                        <div className=\"scale-control\">\n                            <NScaleSlider\n                                onSlideChange={this.onNScaleSlideChange}\n                                onDatasetChange={this.onDatasetTypeChange}\n                                scale={this.state.scale}\n                                datasetType={this.state.datasetType}\n                                disabled={this.state.isSorting}>\n                            </NScaleSlider>\n                        </div>\n                    </div>\n                </div>\n                {/* <div className=\"thridPage pageStandardContent\">\n                    <h2>Part Three: Performance </h2>\n                    <div className=\"performance-graph-container\" >\n                        {\n                            this.state.svgSize &&\n                            (<PerformanceGraph\n                                data={[]}\n                                svgSize={this.state.performanceSvgSize}\n                                transitionDuration={this.props.swapTransition}\n                                highlightedBarIds={this.props.highlightedBarIds}\n                            />)\n                        }\n\n                    </div>\n                </div> */}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"typeface-roboto\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}